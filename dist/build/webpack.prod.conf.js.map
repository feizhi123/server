{"version":3,"sources":["../../build/webpack.prod.conf.js"],"names":["path","require","utils","webpack","config","merge","baseWebpackConfig","CopyWebpackPlugin","HtmlWebpackPlugin","ExtractTextPlugin","OptimizeCSSPlugin","env","build","apiHost","process","ENV","webpackConfig","module","rules","styleLoaders","sourceMap","productionSourceMap","extract","devtool","output","assetsRoot","filename","assetsPath","chunkFilename","plugins","DefinePlugin","__HOST__","cssProcessorOptions","safe","index","template","inject","minify","removeComments","collapseWhitespace","removeAttributeQuotes","chunksSortMode","HashedModuleIdsPlugin","optimize","CommonsChunkPlugin","name","minChunks","resource","test","indexOf","join","__dirname","chunks","from","resolve","to","assetsSubDirectory","ignore","productionGzip","CompressionWebpackPlugin","push","asset","algorithm","RegExp","productionGzipExtensions","threshold","minRatio","bundleAnalyzerReport","BundleAnalyzerPlugin","exports"],"mappings":"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","file":"webpack.prod.conf.js","sourcesContent":["'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n\nconst env = config.build.env\n\nvar apiHost = '';\nswitch (process.env.ENV) {\n    case 'test':\n        apiHost = \"'https://test-api.dingnuo.ai/'\"\n        break;\n    default:\n        apiHost = \"'https://api.dingnuo.ai/'\"\n        break;\n}\n\nconst webpackConfig = merge(baseWebpackConfig, {\n    module: {\n        rules: utils.styleLoaders({\n            sourceMap: config.build.productionSourceMap,\n            extract: true\n        })\n    },\n    devtool: config.build.productionSourceMap ? '#source-map' : false,\n    output: {\n        path: config.build.assetsRoot,\n        filename: utils.assetsPath('js/[name].[chunkhash].js'),\n        chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n    },\n    plugins: [\n        // http://vuejs.github.io/vue-loader/en/workflow/production.html\n        new webpack.DefinePlugin({\n            'process.env': env,\n            __HOST__: apiHost\n        }),\n        // UglifyJs do not support ES6+, you can also use babel-minify for better treeshaking: https://github.com/babel/minify\n        // new webpack.optimize.UglifyJsPlugin({\n        //   compress: {\n        //     warnings: false\n        //   },\n        //   sourceMap: true\n        // }),\n        // extract css into its own file\n        new ExtractTextPlugin({\n            filename: utils.assetsPath('css/[name].[contenthash].css')\n        }),\n        // Compress extracted CSS. We are using this plugin so that possible\n        // duplicated CSS from different components can be deduped.\n        new OptimizeCSSPlugin({\n            cssProcessorOptions: {\n                safe: true\n            }\n        }),\n        // generate dist index.html with correct asset hash for caching.\n        // you can customize output by editing /index.html\n        // see https://github.com/ampedandwired/html-webpack-plugin\n        new HtmlWebpackPlugin({\n            filename: config.build.index,\n            template: 'index.html',\n            inject: true,\n            minify: {\n                removeComments: true,\n                collapseWhitespace: true,\n                removeAttributeQuotes: true\n                // more options:\n                // https://github.com/kangax/html-minifier#options-quick-reference\n            },\n            // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n            chunksSortMode: 'dependency',\n        }),\n        // keep module.id stable when vender modules does not change\n        new webpack.HashedModuleIdsPlugin(),\n        // split vendor js into its own file\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'vendor',\n            minChunks: function (module) {\n                // any required modules inside node_modules are extracted to vendor\n                return (\n                    module.resource &&\n                    /\\.js$/.test(module.resource) &&\n                    module.resource.indexOf(\n                        path.join(__dirname, '../node_modules')\n                    ) === 0\n                )\n            }\n        }),\n        // extract webpack runtime and module manifest to its own file in order to\n        // prevent vendor hash from being updated whenever app bundle is updated\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'manifest',\n            chunks: ['vendor']\n        }),\n        // copy custom static assets\n        new CopyWebpackPlugin([\n            {\n                from: path.resolve(__dirname, '../static'),\n                to: config.build.assetsSubDirectory,\n                ignore: ['.*']\n            }\n        ])\n    ]\n})\n\nif (config.build.productionGzip) {\n    const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n    webpackConfig.plugins.push(\n        new CompressionWebpackPlugin({\n            asset: '[path].gz[query]',\n            algorithm: 'gzip',\n            test: new RegExp(\n                '\\\\.(' +\n                config.build.productionGzipExtensions.join('|') +\n                ')$'\n            ),\n            threshold: 10240,\n            minRatio: 0.8\n        })\n    )\n}\n\nif (config.build.bundleAnalyzerReport) {\n    const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n    webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n"]}